//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: EquipRefiningRequest.proto
namespace Pb
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"EquipRefiningRequest")]
  public partial class EquipRefiningRequest : global::ProtoBuf.IExtensible
  {
    public EquipRefiningRequest() {}
    
    private uint _posZhengXing;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"posZhengXing", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public uint posZhengXing
    {
      get { return _posZhengXing; }
      set { _posZhengXing = value; }
    }
    private uint _pos;
    [global::ProtoBuf.ProtoMember(2, IsRequired = true, Name=@"pos", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public uint pos
    {
      get { return _pos; }
      set { _pos = value; }
    }
    private readonly global::System.Collections.Generic.List<uint> _itemId = new global::System.Collections.Generic.List<uint>();
    [global::ProtoBuf.ProtoMember(3, Name=@"itemId", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public global::System.Collections.Generic.List<uint> itemId
    {
      get { return _itemId; }
    }
  
    private readonly global::System.Collections.Generic.List<uint> _itemNum = new global::System.Collections.Generic.List<uint>();
    [global::ProtoBuf.ProtoMember(4, Name=@"itemNum", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public global::System.Collections.Generic.List<uint> itemNum
    {
      get { return _itemNum; }
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}