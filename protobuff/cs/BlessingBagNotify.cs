//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: BlessingBagNotify.proto
// Note: requires additional types generated from: GameItemData.proto
namespace Pb
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"BlessingBagNotify")]
  public partial class BlessingBagNotify : global::ProtoBuf.IExtensible
  {
    public BlessingBagNotify() {}
    
    private uint _id;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"id", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public uint id
    {
      get { return _id; }
      set { _id = value; }
    }
    private readonly global::System.Collections.Generic.List<GameItemData> _bags = new global::System.Collections.Generic.List<GameItemData>();
    [global::ProtoBuf.ProtoMember(2, Name=@"bags", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public global::System.Collections.Generic.List<GameItemData> bags
    {
      get { return _bags; }
    }
  
    private uint _box_type;
    [global::ProtoBuf.ProtoMember(3, IsRequired = true, Name=@"box_type", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public uint box_type
    {
      get { return _box_type; }
      set { _box_type = value; }
    }
    private readonly global::System.Collections.Generic.List<GameItemData> _boxes = new global::System.Collections.Generic.List<GameItemData>();
    [global::ProtoBuf.ProtoMember(4, Name=@"boxes", DataFormat = global::ProtoBuf.DataFormat.Default)]
    public global::System.Collections.Generic.List<GameItemData> boxes
    {
      get { return _boxes; }
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}